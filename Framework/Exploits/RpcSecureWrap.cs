using Exploits.IL;
using Photon.Pun;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Reflection.Emit;
using System.Text;
using VRCSDK2;

#if STEAM
using PhotonNetwork = DKGBGACHCGF;
using PhotonPlayer = MAAMBGJCOKM;
#elif OCULUS
using PhotonNetwork = DKGBGACHCGF;
using PhotonPlayer = MAAMBGJCOKM;
#endif

namespace Exploits
{
    public static class RpcSecureWrap
    {
        private static BindingFlags any = ((System.Reflection.BindingFlags)(-1));

        private static Type vrcEventType = typeof(NetworkMetadata).GetMethod("OnDestroy", any).Parse().LastOrDefault((ILInstruction x) => x.OpCode == OpCodes.Ldftn).GetArgument<MethodInfo>().GetParameters().First<ParameterInfo>().ParameterType;
        private static MethodInfo setVrcEventMethod = vrcEventType.GetProperties(any).FirstOrDefault((PropertyInfo x) => x.PropertyType == typeof(VRC_EventHandler.VrcEvent)).GetSetMethod();
        private static MethodInfo setPhotonTime = vrcEventType.GetProperties(any).FirstOrDefault((PropertyInfo x) => x.PropertyType == typeof(double)).GetSetMethod();

        private static FieldInfo vrcBroadcastTypeField = vrcEventType.GetFields(any).FirstOrDefault((FieldInfo x) => x.FieldType == typeof(VRC_EventHandler.VrcBroadcastType));
        private static FieldInfo someRandomIntField = vrcEventType.GetFields(any).FirstOrDefault((FieldInfo x) => x.FieldType == typeof(int));
        private static FieldInfo someRandomLongField = vrcEventType.GetFields(any).FirstOrDefault((FieldInfo x) => x.FieldType == typeof(long));
        private static FieldInfo someRandomFloatField = vrcEventType.GetFields(any).FirstOrDefault((FieldInfo x) => x.FieldType == typeof(float));
        private static MethodInfo getPhotonTime = typeof(ModerationManager).GetMethod("IsKicked").Parse().First((ILInstruction x) => x.OpCode == OpCodes.Call).GetArgument<MethodInfo>();
        private static MethodInfo getSomeInt = typeof(UserCameraController).GetMethod("onUseDown").Parse().First((ILInstruction x) => x.OpCode == OpCodes.Call).GetArgument<MethodInfo>();

        private static MethodInfo rpcSecureMethod = typeof(PhotonView).GetMethods().Last((MethodInfo x) => x.Name == "RpcSecure" && x.GetParameters().Length == 4 && x.GetParameters()[1].ParameterType == typeof(PhotonPlayer));

        public static void RpcSecure(PhotonView pv, string n, object p, bool b, object[] objs)
        {
            rpcSecureMethod.Invoke(pv, new object[]
            {
                    n,
                    p,
                    b,
                    objs
            });
        }

        private static string[] rpcNames = new string[]
        {
            "PlayEmoteRPC",
            "ShowSocialRankRPC",
            "MuteChangeRPC",
            "InternalUseStationRPC",
            "BlockStateChangeRPC"
        };
        
        public static Random Random = new Random(127589125);

        public static string GetRandomRpc()
        {
            return "myRPC";
        }

        public static void SendRpcSecure(PhotonPlayer to, VRC_EventHandler.VrcEvent ev)
        {
            object obj = Activator.CreateInstance(vrcEventType);

            setVrcEventMethod.Invoke(obj, new object[]
            {
                ev
            });

            setPhotonTime.Invoke(obj, new object[]
            {
                getPhotonTime.Invoke(null, null)
            });

            vrcBroadcastTypeField.SetValue(obj, VRC_EventHandler.VrcBroadcastType.Always);

            someRandomIntField.SetValue(obj, getSomeInt.Invoke(null, null));
            someRandomLongField.SetValue(obj, 0L);
            someRandomFloatField.SetValue(obj, 0f);

            RpcSecure(PhotonView.Find(1), "ProcessEvent", to, true, new object[]
            {
                obj
            });
        }
    }
}
