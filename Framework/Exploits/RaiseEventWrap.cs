using ExitGames.Client.Photon;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

namespace Exploits
{
    public static class RaiseEventWrap
    {
        private static class Reflection
        {
            private static Assembly GetAssemblyByName(string name)
            {
                return AppDomain.CurrentDomain.GetAssemblies().
                       SingleOrDefault(assembly => assembly.GetName().Name == name);
            }

            public static Type networkingPeerType;
            public static Type raiseEventArgsType;
            public static Type photonNetworkType;
            public static MethodInfo raiseEventMethod;
            public static MethodInfo inRoomMethod;
            public static FieldInfo networkingPeerInst;

            static Reflection()
            {
                Assembly csharp = GetAssemblyByName("Assembly-CSharp");

                List<Type> types = csharp.GetTypes().ToList();
                List<Type> enums = csharp.GetTypes().Where(x => x.IsEnum).ToList();

                networkingPeerType = types.First(x =>
                    typeof(IPhotonPeerListener).IsAssignableFrom(x)
                    && x.GetMethods().Any(f => f.Name == "OnEvent")
                    && x.GetMethods().Any(f => f.Name == "Connect")
                );

                raiseEventArgsType = types.First(x =>
                    x.GetFields().Length == 8 && x.GetFields().Where(f =>
                        f.FieldType == typeof(int[])
                        || f.FieldType == typeof(bool)
                        || f.FieldType == typeof(byte)
                    ).Count() == 5
                );

                raiseEventMethod = networkingPeerType.GetMethods(BindingFlags.FlattenHierarchy | BindingFlags.Instance | BindingFlags.Public).Where(x =>
                    x.ReturnType == typeof(bool)
                    && x.GetParameters().Length == 4
                    && x.GetParameters().First().ParameterType == typeof(byte)
                    && x.GetParameters()[1].ParameterType == typeof(object)
                    && x.GetParameters()[2].ParameterType == typeof(bool)
                    && x.GetParameters()[3].ParameterType == raiseEventArgsType
                ).ToArray()[1];

                Type inRoomReturnType = enums.First(x => Enum.GetNames(x).Contains("DisconnectingFromMasterserver"));

                photonNetworkType = types.First(x =>
                    (x.IsAbstract && x.IsSealed)
                    && x.IsPublic
                    && x.GetMethods().Any(g =>
                       g.ReturnType == inRoomReturnType
                    )
                );

                inRoomMethod = photonNetworkType.GetMethods().First(x =>
                    x.ReturnType == inRoomReturnType
                    && x.IsPublic
                    && x.IsStatic
                );

                networkingPeerInst = photonNetworkType.GetFields(BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.Public).First(x =>
                    x.FieldType.Name == networkingPeerType.Name
                );
            }
        }

        public static void RaiseEvent(this object data, byte code, int[] targets = null)
        {
            object raiseData = null;

            if (targets != null)
            {
                object type = Activator.CreateInstance(Reflection.raiseEventArgsType);
                type.GetType().GetFields().First(x => x.FieldType == typeof(int[])).SetValue(type, targets);
                raiseData = type;
            }

            Reflection.raiseEventMethod.Invoke(Reflection.networkingPeerInst.GetValue(Reflection.photonNetworkType), new object[] { code, data, true, raiseData });
        }
    }
}